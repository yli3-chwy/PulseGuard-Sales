WITH _retails AS (
    SELECT
        order_placed_dttm::date AS order_placed_dttm,
        products.product_part_number,
        LEFT(addr.customer_address_zip, 5) AS customer_address_zip,
        products.product_category_level1,
        products.product_category_level2,
        products.product_category_level3,
        products.product_merch_classification1,
        products.product_merch_classification2,
        products.product_merch_classification3,
        SUM(olcm.order_line_net_sales) AS net_sales,
        SUM(olcm.order_line_quantity) AS units
    FROM chewybi.order_line_cost_measures olcm
    LEFT JOIN chewybi.products AS products USING (product_key)
    LEFT JOIN chewybi.orders AS orders USING (order_key)
    LEFT JOIN chewybi.customer_addresses addr USING (customer_address_key)
    WHERE
        products.product_discontinued_flag = False
        AND products.product_buyable_flag = True
        AND products.product_published_flag = True
        AND order_placed_dttm::date between '2023-09-04' and '2023-09-10' -- a week with no promo-- CURRENT_DATE - 365 and CURRENT_DATE
        AND LOWER(orders.order_status) NOT IN ('x', 'j')
        AND products.product_company_description NOT ILIKE '%canada%'
        
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
)

, retails as (
    SELECT
        order_placed_dttm,
        product_part_number,
        SUM(net_sales) AS total_net_sales,
        SUM(units) AS total_units
    FROM _retails
    GROUP BY 1, 2
)  -- select * from retails;


, _stock AS (
    SELECT
        p.product_part_number,
        i.inventory_snapshot_snapshot_dt::date AS inventory_snapshot_snapshot_dt,
        sum(nvl(greatest(inventory_snapshot_sellable_quantity, 0), 0)) AS current_on_hand --,
        -- sum(nvl(greatest(inventory_snapshot_quantity, 0), 0)) AS inventory_snapshot_quantity,
        -- sum(nvl(greatest(inventory_snapshot_on_hand_quantity, 0), 0)) AS inventory_snapshot_on_hand_quantity
    FROM chewybi.inventory_snapshot i
    JOIN chewybi.products p USING (product_key)
    JOIN chewybi.locations l USING (location_key)
    WHERE
        1=1
        AND inventory_snapshot_snapshot_dt::date between '2023-09-04' and '2023-09-10' -- a week with no promo--BETWEEN CURRENT_DATE - 365 AND CURRENT_DATE
        AND l.fulfillment_active = TRUE
        AND l.location_active_warehouse = 1
        AND l.location_warehouse_type = 0
        AND l.product_company_description = 'Chewy'
        
    GROUP BY 1, 2
)

, stock as (
SELECT
    product_part_number,
    inventory_snapshot_snapshot_dt,
    SUM(current_on_hand) AS total_current_on_hand --,
    -- SUM(inventory_snapshot_quantity) AS total_inventory_snapshot_quantity,
    -- SUM(inventory_snapshot_on_hand_quantity) AS total_inventory_snapshot_on_hand_quantity
FROM _stock
GROUP BY 1, 2
) -- select * from stock;

, price as (
select 
    snapshot_date::date as price_snapshot_date
    , part_number
    , category_level1
    , category_level2
    , category_level3
    , MERCH_CLASSIFICATION1
    , MERCH_CLASSIFICATION2
    , MERCH_CLASSIFICATION3
    , price
    , list_price
    , rating_avg
    , rating_cnt
    
from PDM.PRODUCT_SNAPSHOT
where 1=1
and snapshot_date::date between '2023-09-04' and '2023-09-10' -- a week with no promo--between CURRENT_DATE - 365 and CURRENT_DATE
)

-- Joining the CTEs
SELECT
    r.order_placed_dttm,
    r.product_part_number,
    -- r.total_net_sales,
    r.total_units,
    -- s.inventory_snapshot_snapshot_dt,
    s.total_current_on_hand,
    -- p.price_snapshot_date,
    p.category_level1,
    p.category_level2,
    p.category_level3,
    p.MERCH_CLASSIFICATION1,
    p.MERCH_CLASSIFICATION2,
    p.MERCH_CLASSIFICATION3,
    -- p.price,
    p.list_price,
    p.rating_avg,
    p.rating_cnt
FROM
    retails r
JOIN
    stock s ON r.product_part_number = s.product_part_number AND r.order_placed_dttm = s.inventory_snapshot_snapshot_dt
JOIN
    price p ON r.product_part_number = p.part_number AND r.order_placed_dttm = p.price_snapshot_date

ORDER BY r.product_part_number, r.order_placed_dttm
    
